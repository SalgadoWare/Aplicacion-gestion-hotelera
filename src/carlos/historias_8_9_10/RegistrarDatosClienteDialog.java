//<<<<<<< HEAD
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package carlos.historias_8_9_10;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author carlos
 */
public class RegistrarDatosClienteDialog extends javax.swing.JDialog {

    
    
    /**
     * Creates new form RegistrarDatosClienteDialog
     */
    private RegistrarDatosClienteDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        iniciarComponentesMio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDatosCliente = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfApellidos = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfDni = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfPasaporte = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbTipoTarjeta = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        tfNumeroTarjeta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfDireccion = new javax.swing.JTextField();
        tfTelefonoFijo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tfPoblacion = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfCodigoPostal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfTelefonoMovil = new javax.swing.JTextField();
        dcFechaNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        bAceptarCP = new javax.swing.JButton();
        bCancelarCP = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        tabbedPaneCliente = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        rbDni = new javax.swing.JRadioButton();
        rbPasaporte = new javax.swing.JRadioButton();
        tfDniTP = new javax.swing.JTextField();
        tfPasaporteTP = new javax.swing.JTextField();
        bBuscarCliente = new javax.swing.JButton();
        bModificarDatos = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        bNuevoCliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Datos del cliente");
        setResizable(false);

        jLabel4.setText("Nombre");

        jLabel7.setText("Apellidos");

        jLabel8.setText("DNI");

        jLabel9.setText("Pasaporte");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Tarjeta de crédito/débito");

        jLabel2.setText("Tipo de tarjeta");

        cbTipoTarjeta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Visa", "Amex", "MasterCard" }));

        jLabel10.setText("Número");

        jLabel5.setText("Dirección");

        jLabel11.setText("Teléfono fijo");

        jLabel12.setText("Población");

        jLabel13.setText("Código postal");

        jLabel14.setText("E-mail");

        jLabel15.setText("Fecha de nacimiento");

        jLabel6.setText("Teléfono móvil");

        dcFechaNacimiento.setDateFormatString("dd/MM/yyyy");

        bAceptarCP.setBackground(new java.awt.Color(43, 110, 232));
        bAceptarCP.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        bAceptarCP.setForeground(new java.awt.Color(255, 255, 255));
        bAceptarCP.setText("Aceptar");
        bAceptarCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAceptarCPActionPerformed(evt);
            }
        });

        bCancelarCP.setBackground(new java.awt.Color(100, 100, 100));
        bCancelarCP.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        bCancelarCP.setForeground(new java.awt.Color(255, 255, 255));
        bCancelarCP.setText("Cancelar");
        bCancelarCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarCPActionPerformed(evt);
            }
        });

        tabbedPaneCliente.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneClienteStateChanged(evt);
            }
        });

        jLabel18.setText("Datos del cliente:");

        bgDatosCliente.add(rbDni);
        rbDni.setText("DNI");
        rbDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDniActionPerformed(evt);
            }
        });

        bgDatosCliente.add(rbPasaporte);
        rbPasaporte.setText("Pasaporte");
        rbPasaporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPasaporteActionPerformed(evt);
            }
        });

        bBuscarCliente.setText("Buscar cliente");
        bBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarClienteActionPerformed(evt);
            }
        });

        bModificarDatos.setText("Modificar datos");
        bModificarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbDni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfDniTP, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbPasaporte)
                                .addGap(18, 18, 18)
                                .addComponent(tfPasaporteTP, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(bBuscarCliente))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(bModificarDatos)))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbDni)
                            .addComponent(tfDniTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPasaporte)
                            .addComponent(tfPasaporteTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(bBuscarCliente)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bModificarDatos)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        tabbedPaneCliente.addTab("Buscar cliente", jPanel1);

        bNuevoCliente.setText("Nuevo cliente");
        bNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(bNuevoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(bNuevoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        tabbedPaneCliente.addTab("Registrar nuevo cliente", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbTipoTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfNumeroTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTelefonoFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfTelefonoMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(dcFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(bCancelarCP)
                        .addGap(18, 18, 18)
                        .addComponent(bAceptarCP)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(tabbedPaneCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(tabbedPaneCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTipoTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNumeroTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTelefonoFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfTelefonoMovil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bCancelarCP)
                    .addComponent(bAceptarCP))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAceptarCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAceptarCPActionPerformed
        
        //Aqui hacemos todas las comprobaciones de los datos antes de cerrar la ventana
        /*Campos obligatorios:
            -Nombre
            -Apellidos
            -DNI ó Pasaporte (al menos 1 de los 2)
            -Numero de tarjeta correcto (ha de corresponderse con el tipo
        */
        
        ValidadorDNI validador = new ValidadorDNI();
        
        //Comprobamos que el nombre no es nulo
        if( getNombre() == null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Nombre", "Campo Nombre vacío",JOptionPane.WARNING_MESSAGE);
        }
        //Comprobamos que el campo apellidos no es nulo
        else if( getApellidos()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Apellidos", "Campo Apellidos vacío",JOptionPane.WARNING_MESSAGE);
        }
        //Si DNI y Pasaporte son nulos
        else if( getDni() == null && getPasaporte() == null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Dni\no para el campo Pasaporte", "Introduce un dni o un pasaporte",JOptionPane.WARNING_MESSAGE);
        }
        
        //Comprobamos que el DNI sea valido (solo si hay dni)
        else if(getDni() != null && !validador.isDniValido(getDni())){
            JOptionPane.showMessageDialog(null,"El DNI introducido NO es válido", "DNI no válido",JOptionPane.WARNING_MESSAGE);
        }
        
        //Comprobamos que no haya un cliente en la BD con el mismo dni o mismo pasaporte
        
        //Si el cliente es nuevo y le hemos puesto dni, si el dni ya existe en la BD mostramos un mensaje
        else if(nuevoCliente() && getDni()!=null && BD_jdbc.existeDniEnlaBD(getDni())){
            JOptionPane.showMessageDialog(null,"Ya existe un cliente con ese mismo dni", "DNI repetido",JOptionPane.WARNING_MESSAGE);
        }
        //Si el cliente es nuevo y le hemos puesto pasaporte, si el pasaporte ya existe en la BD mostramos un mensaje
        else if(nuevoCliente() && getPasaporte()!=null && BD_jdbc.existePasaporteEnlaBD(getPasaporte())){
            JOptionPane.showMessageDialog(null,"Ya existe un cliente con ese mismo pasaporte", "Pasaporte repetido",JOptionPane.WARNING_MESSAGE);
        }
        
        //Si numeroTarjeta es nulo
        else if( getNumeroTarjeta()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Número\nde la tarjeta", "Introduce un número de la tarjeta",JOptionPane.WARNING_MESSAGE);
        }
        //Si numeroTarjeta no es correcto
        else if( ! numeroTarjetaCorrecto(getNumeroTarjeta(),getTipoTarjeta() ) ){
            //JOptionPane.showMessageDialog(null,"El número de la tarjeta es incorrecto", "Número tarjeta incorrecto",JOptionPane.WARNING_MESSAGE);
        }
        //Comprobamos que el campo direccion no es nulo
        else if( getDireccion()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Dirección", "Campo Dirección vacío",JOptionPane.WARNING_MESSAGE);
        }
        //Comprobamos que el campo poblacion no es nulo
        else if( getPoblacion()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Población", "Campo Población vacío",JOptionPane.WARNING_MESSAGE);
        }
        //Comprobamos que el campo cp no es nulo
        else if( getCP()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Código postal", "Campo Código postal vacío",JOptionPane.WARNING_MESSAGE);
        }
      //Comprobamos que el campo telefono movil no es nulo
        else if( getTelefonoMovil()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Teléfono móvil", "Campo Teléfono móvil vacío",JOptionPane.WARNING_MESSAGE);
        }
        //Comprobamos que el campo fecha Nacimiento no es nulo
        else if( getFechaNacimiento()== null ){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el campo Fecha nacimiento", "Campo Fecha nacimiento vacío",JOptionPane.WARNING_MESSAGE);
        }
        
        
        else{//Si el valor está bien

            POK=true;//Indicamos que se ha pulsado el boton de Aceptar
            this.setVisible(false);
        }
    }//GEN-LAST:event_bAceptarCPActionPerformed

    private boolean numeroTarjetaCorrecto(String numeroTarjeta,String tipo){
        
        switch(tipo){
            case "Visa":
                return numeroVisaCorrecto(numeroTarjeta);
            case "Amex":
                return numeroAmexCorrecto(numeroTarjeta);
            case "MasterCard":
                return numeroMasterCardCorrecto(numeroTarjeta);
            default:
                return false;
        }
    }
    
    private boolean is16Digitos(String numeroTarjeta){
        if(numeroTarjeta.length()!=16)
            return false;
        
        try{
            Long.parseLong(numeroTarjeta);
        }catch (NumberFormatException nfe){
            return false;
	}
        
        return true;
    }
    
    private boolean is15Digitos(String numeroTarjeta){
        if(numeroTarjeta.length()!=15)
            return false;
        
        try{
            Long.parseLong(numeroTarjeta);
        }catch (NumberFormatException nfe){
            return false;
	}
        
        return true;
    }
    
    private boolean numeroVisaCorrecto(String numeroTarjeta){
        //El numero de la tarjeta ha de ser 16 digitos
        if((!is16Digitos(numeroTarjeta))){
            JOptionPane.showMessageDialog(null,"La tarjeta VISA ha de tener 16 dígitos", "Tarjeta VISA incorrecta",JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        //Las visa empiezan por 4
        if(numeroTarjeta.charAt(0)=='4')
            if(sumaDigitosCorrecto(numeroTarjeta))
                return true;
        
        JOptionPane.showMessageDialog(null,"Ayuda: Las tarjetas de tipo Visa empiezan por 4", "Número tarjeta incorrecto",JOptionPane.WARNING_MESSAGE);
        return false;
    }
    private boolean numeroAmexCorrecto(String numeroTarjeta){
        //El numero de la tarjeta ha de ser 15 digitos
        if((!is15Digitos(numeroTarjeta))){
            JOptionPane.showMessageDialog(null,"La tarjeta Amex ha de tener 15 dígitos", "Tarjeta Amex incorrecta",JOptionPane.WARNING_MESSAGE);
            return false;
        }
        //Las amex por 34/37
        if(numeroTarjeta.startsWith("34")  || numeroTarjeta.startsWith("37"))
            if(sumaDigitosAmexCorrecto(numeroTarjeta))
                return true;
        
        JOptionPane.showMessageDialog(null,"Ayuda: Las tarjetas de tipo Amex empiezan por 34/35/36/37", "Número tarjeta incorrecto",JOptionPane.WARNING_MESSAGE);
        return false;
    }
    private boolean numeroMasterCardCorrecto(String numeroTarjeta){
        //El numero de la tarjeta ha de ser 16 digitos
        if((!is16Digitos(numeroTarjeta))){
            JOptionPane.showMessageDialog(null,"La tarjeta MasterCard ha de tener 16 dígitos", "Tarjeta MasterCard incorrecta",JOptionPane.WARNING_MESSAGE);
            return false;
        }
        //Las master card por 51-55
        if(numeroTarjeta.startsWith("51") || numeroTarjeta.startsWith("52") || numeroTarjeta.startsWith("53") || numeroTarjeta.startsWith("54")|| numeroTarjeta.startsWith("55"))
            if(sumaDigitosCorrecto(numeroTarjeta))
                return true;
        
        JOptionPane.showMessageDialog(null,"Ayuda: Las tarjetas de tipo MasterCard empiezan por 51/52/53/54/55", "Número tarjeta incorrecto",JOptionPane.WARNING_MESSAGE);
        return false;
    }
    
    private boolean sumaDigitosCorrecto(String numeroTarjeta){
        //Obtenemos los digitos 1 3 5 7 9 11 13 15
        Integer[] digitosImpares = new Integer[8];
        for (int i=1, j=0; i<=15; i+=2,j++) {
            digitosImpares[j] = Integer.parseInt( String.valueOf( numeroTarjeta.charAt(i-1) ) );
        }
        
        //los multiplicamos por 2
        for (int i=0; i<digitosImpares.length; i++) {
            digitosImpares[i] *= 2;
        }
        
        int suma = 0;
        
        //Los numeros que tienen mas de 2 digitos, los dividimos y sumamos
        for (int i=0; i<digitosImpares.length; i++) {
            if(tiene2Digitos(digitosImpares[i])){
                suma+=separaYSumaNumeroDe2Digitos(digitosImpares[i]);
            }else
                suma+=digitosImpares[i];
        }
        
        //Sacamos los numeros pares de la tarjeta y tambien los sumamos
        for (int i=2; i<=16; i+=2) {
            suma += Integer.parseInt( String.valueOf( numeroTarjeta.charAt(i-1) ) );
        }
        
        //Si la suma es divisible entre 10, la tarjeta es correcta
        if(suma%10==0)
            return true;
        
        else return false;
        
    }
    
    public static Long[] getDigits(Long num) {
        List<Long> digits = new ArrayList<>();
        collectDigits(num, digits);
        return digits.toArray(new Long[]{});
    }
    
    private static void collectDigits(Long num, List<Long> digits) {
        if(num / 10 > 0) {
            collectDigits(num / 10, digits);
        }
        digits.add(num % 10);
    }
    
    private boolean sumaDigitosAmexCorrecto(String numeroTarjeta){
        Long[] digitos = getDigits(Long.parseLong(numeroTarjeta));
        return verificacionluhn(digitos);
        /*
        //Obtenemos los digitos 1 3 5 7 9 11 13
        Integer[] digitosImpares = new Integer[7];
        for (int i=1, j=0; i<=13; i+=2,j++) {
            digitosImpares[j] = Integer.parseInt( String.valueOf( numeroTarjeta.charAt(i-1) ) );
        }
        
        //los multiplicamos por 2
        for (int i=0; i<digitosImpares.length; i++) {
            digitosImpares[i] *= 2;
        }
        
        int suma = 0;
        
        //Los numeros que tienen mas de 2 digitos, los dividimos y sumamos
        for (int i=0; i<digitosImpares.length; i++) {
            if(tiene2Digitos(digitosImpares[i])){
                suma+=separaYSumaNumeroDe2Digitos(digitosImpares[i]);
            }else
                suma+=digitosImpares[i];
        }
        
        //Sacamos los numeros pares de la tarjeta y tambien los sumamos
        for (int i=2; i<=14; i+=2) {
            suma += Integer.parseInt( String.valueOf( numeroTarjeta.charAt(i-1) ) );
        }
        
        //Si la suma es divisible entre 10, la tarjeta es correcta
        if(suma%10==0)
            return true;
        
        else return false;
        */
        
    }
    
    public static boolean verificacionluhn(Long[] digits){
        long sum = 0;
        int length = digits.length;
        for(int i = 0; i < length; i++) {
           // sacar los digitos en orden inverso
           long digit = digits[length - i - 1];

           // cada segundo número se multiplica por 2
           if(i % 2 == 1) {
             digit = digit * 2;
           }
           if(digit > 9){
             digit = digit - 9;
           }
           sum = sum + digit;
        }
        return sum % 10 == 0;
  }
    
    private boolean tiene2Digitos(int n){
        int cifras= 0;    //esta variable es el contador de cifras
        while(n!=0){             //mientras a n le queden cifras
            n = n/10;         //le quitamos el último dígito
            cifras++;          //sumamos 1 al contador de cifras
        }
        
        if(cifras==2)
            return true;
        else return false; 
    }
    
    private int separaYSumaNumeroDe2Digitos(int n){
        int dig1 = n%10;
        int dig2 = (n/10)%10;
        return dig1+dig2;
    }
    
    private void bCancelarCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarCPActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_bCancelarCPActionPerformed

    private void rbDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDniActionPerformed
        //Activamos el tdDni y desactivamos el tfPasaporte
        tfDniTP.setEnabled(true);
        tfPasaporteTP.setEnabled(false);
    }//GEN-LAST:event_rbDniActionPerformed

    private void rbPasaporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPasaporteActionPerformed
        //Activamos el tfPasaporte y desactivamos el tdDni
        tfPasaporteTP.setEnabled(true);
        tfDniTP.setEnabled(false);
    }//GEN-LAST:event_rbPasaporteActionPerformed

    private void bBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarClienteActionPerformed
        //Si esta seleccionado el dni y no hay valor
        if(rbDni.isSelected() && tfDniTP.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el DNI", "Campo DNI vacío",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Si esta seleccionado el pasaporte y no hay valor
        else if(rbPasaporte.isSelected() && tfPasaporteTP.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el pasaporte", "Campo pasaporte vacío",JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Aqui hay valor para dni o para pasaporte
        Map<String,Object> datosCliente;
        
        
        if(rbDni.isSelected()){
            //Buscamos los datos del cliente cuyo dni nos indican
            String dni = tfDniTP.getText();
            datosCliente = BD_jdbc.dameDatosClienteConDni(dni);
        }
        else{ //  if(rbPasaporte.isSelected())
            //Buscamos los datos del cliente cuyo pasaporte nos indican
            String pasaporte = tfPasaporteTP.getText();
            datosCliente = BD_jdbc.dameDatosClienteConPasaporte(pasaporte);
        }
        
        //Comprobamos si el cliente exite:
        Boolean existe = (Boolean) datosCliente.get("existe");
        
        if(!existe){
            //Si no existe mostramos un dialogo y nos salimos
            System.out.println("NO EXISTE NINGUN CLIENTE CON ESA INFORMACION");
            clienteYaExiste=false;
            JOptionPane.showMessageDialog(null,"No existe ningún cliente con esa información", "Cliente no existe",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui el cliente existe
        System.out.println("EXISTE UN CLIENTE CON ESA INFORMACION");
        clienteYaExiste=true;
        
        //Guardamos los datos del cliente
        datosClienteActual = datosCliente;
        //Añadimos los datos a la interfaz
        tfNombre.setText( (String) datosCliente.get("nombre"));
        tfApellidos.setText( (String) datosCliente.get("apellidos"));
        tfDni.setText( (String) datosCliente.get("dni"));
        tfPasaporte.setText( (String) datosCliente.get("pasaporte"));
        
        String tipo =  (String) datosCliente.get("tipoTarjeta");
        setCBTipoTarjeta(tipo);
        
        tfNumeroTarjeta.setText( (String) datosCliente.get("numeroTarjeta"));
        tfDireccion.setText( (String) datosCliente.get("direccion"));
        tfPoblacion.setText( (String) datosCliente.get("poblacion"));
        tfCodigoPostal.setText( (String) datosCliente.get("cp"));
        tfTelefonoFijo.setText( (String) datosCliente.get("telefonoFijo"));
        tfTelefonoMovil.setText( (String) datosCliente.get("telefonoMovil"));
        tfEmail.setText( (String) datosCliente.get("email"));
        
        System.out.println("fechaNacimiento: " + (LocalDate) datosCliente.get("fechaNacimiento"));
        
        if(datosCliente.get("fechaNacimiento")==null)
            dcFechaNacimiento.setDate(null);
        
        else{
            LocalDate fechaNacimiento_LD = (LocalDate) datosCliente.get("fechaNacimiento");
            java.util.Date fechaNacimiento = java.util.Date.from(fechaNacimiento_LD.atStartOfDay(ZoneId.systemDefault()).toInstant());
            dcFechaNacimiento.setDate(fechaNacimiento);
        }

    }//GEN-LAST:event_bBuscarClienteActionPerformed

    private void setCBTipoTarjeta(String tipo){
        switch(tipo){
            case "Visa":
                cbTipoTarjeta.setSelectedIndex(0);
                break;
            case "Amex":
                cbTipoTarjeta.setSelectedIndex(1);
                break;
            case "MasterCard":
                cbTipoTarjeta.setSelectedIndex(2);
                break;
        }
    }
    
    
    private void bNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoClienteActionPerformed
        nuevoCliente=true;

        //Habilitamos todo
        tfNombre.setEnabled(true);
        tfApellidos.setEnabled(true);
        tfDni.setEnabled(true);
        tfPasaporte.setEnabled(true);
        cbTipoTarjeta.setEnabled(true);
        tfNumeroTarjeta.setEnabled(true);
        tfDireccion.setEnabled(true);
        tfPoblacion.setEnabled(true);
        tfCodigoPostal.setEnabled(true);
        tfTelefonoFijo.setEnabled(true);
        tfTelefonoMovil.setEnabled(true);
        tfEmail.setEnabled(true);
        dcFechaNacimiento.setEnabled(true);
        
    }//GEN-LAST:event_bNuevoClienteActionPerformed

    private void bModificarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarDatosActionPerformed
        //Si datosClienteActual es null es que no hay datos y mostramos un mensaje y salimos
        if(datosClienteActual==null){
            modificarDatosCliente=false;
            JOptionPane.showMessageDialog(null,"No se han cargado los datos de ningún cliente", "No hay datos cargados",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui hay datos
        
        //Marcamos que se van a modificar los datos
        modificarDatosCliente = true;

        //Habilitamos todo
        tfNombre.setEnabled(true);
        tfApellidos.setEnabled(true);
        tfDni.setEnabled(true);
        tfPasaporte.setEnabled(true);
        cbTipoTarjeta.setEnabled(true);
        tfNumeroTarjeta.setEnabled(true);
        tfDireccion.setEnabled(true);
        tfPoblacion.setEnabled(true);
        tfCodigoPostal.setEnabled(true);
        tfTelefonoFijo.setEnabled(true);
        tfTelefonoMovil.setEnabled(true);
        tfEmail.setEnabled(true);
        dcFechaNacimiento.setEnabled(true);

    }//GEN-LAST:event_bModificarDatosActionPerformed

    private void tabbedPaneClienteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneClienteStateChanged
        iniciarComponentesMio();
    }//GEN-LAST:event_tabbedPaneClienteStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarDatosClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarDatosClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarDatosClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarDatosClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RegistrarDatosClienteDialog dialog = new RegistrarDatosClienteDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Codigo mio
    private boolean POK;//Variable ¿pulsó OK?
    
    public RegistrarDatosClienteDialog(){
        this(null,true);//Ventana modal
    }
    
    public boolean showDialog(){
        
        tabbedPaneCliente.setSelectedIndex(0);
        // Inicialización de la interfaz
        iniciarComponentesMio();
        
        POK=false;
        setVisible(true);//Mostramos la ventana
        //Es un codigo bloqueante
        //Como la ventana es modal se queda bloqueando la ventana anterior
        //La ventana antigua queda bloqueada porque el metodo setVisible no termina
        return POK;//Aqui POK vale true si el usuario pulso el boton OK y false si pulso Cancelar o cerro la ventana
    }
    
    public void iniciarComponentesMio(){
        //Inicializamos la interfaz
        java.util.Date fechaNacDate = java.util.Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());
        dcFechaNacimiento.setMaxSelectableDate(fechaNacDate);
        
        tfNombre.setText("");
        tfApellidos.setText("");
        tfDni.setText("");
        tfPasaporte.setText("");
        cbTipoTarjeta.setSelectedIndex(0);
        tfNumeroTarjeta.setText("");
        tfDireccion.setText("");
        tfPoblacion.setText("");
        tfCodigoPostal.setText("");
        tfTelefonoFijo.setText("");
        tfTelefonoMovil.setText("");
        tfEmail.setText("");
        dcFechaNacimiento.setDate(null);
        
        
        rbDni.setSelected(true);//Por defecto esta seleccionado el dni
        tfDniTP.setEnabled(true);//Y su tf esta habilitado
        tfDniTP.setText("");
        rbPasaporte.setSelected(false);//Esta no esta seleccionado el pasaporte
        tfPasaporteTP.setEnabled(false);//Y su tf esta deshabilitado
        tfPasaporteTP.setText("");
        
        tfNombre.setEnabled(false);
        tfApellidos.setEnabled(false);
        tfDni.setEnabled(false);
        tfPasaporte.setEnabled(false);
        cbTipoTarjeta.setEnabled(false);
        tfNumeroTarjeta.setEnabled(false);
        tfDireccion.setEnabled(false);
        tfPoblacion.setEnabled(false);
        tfCodigoPostal.setEnabled(false);
        tfTelefonoFijo.setEnabled(false);
        tfTelefonoMovil.setEnabled(false);
        tfEmail.setEnabled(false);
        dcFechaNacimiento.setEnabled(false);
                
        
        modificarDatosCliente=false;
        nuevoCliente=false;
        clienteYaExiste=false;
    }
    
    public String getNombre(){
        String texto = tfNombre.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getApellidos(){
        String texto = tfApellidos.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getDni(){
        String texto = tfDni.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getPasaporte(){
        String texto = tfPasaporte.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getTipoTarjeta(){
        String tipo = (String) cbTipoTarjeta.getSelectedItem();
        return tipo;
    }

    public String getNumeroTarjeta(){
        String texto = tfNumeroTarjeta.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getDireccion(){
        String texto = tfDireccion.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getPoblacion(){
        String texto = tfPoblacion.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getCP(){
        String texto = tfCodigoPostal.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getTelefonoFijo(){
        String texto = tfTelefonoFijo.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getTelefonoMovil(){
        String texto = tfTelefonoMovil.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public String getEmail(){
        String texto = tfEmail.getText();
        if(texto.isEmpty())
            return null;
        else
            return texto;
    }
    
    public LocalDate getFechaNacimiento(){
        java.util.Date fn = dcFechaNacimiento.getDate();
        if(fn!=null){
            fn.setHours(0);fn.setMinutes(0);fn.setSeconds(0);
            LocalDate ld = fn.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            return ld;
        }
        else return null;
    }
    
    public boolean clienteYaExiste(){
        return clienteYaExiste;
    }
    
    public boolean modificarDatosCliente(){
        return modificarDatosCliente;
    }
    
    public boolean nuevoCliente(){
        return nuevoCliente;
    }
    
    private boolean clienteYaExiste;
    private boolean modificarDatosCliente;
    
    private Map<String,Object> datosClienteActual;   
    private boolean nuevoCliente;

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAceptarCP;
    private javax.swing.JButton bBuscarCliente;
    private javax.swing.JButton bCancelarCP;
    private javax.swing.JButton bModificarDatos;
    private javax.swing.JButton bNuevoCliente;
    private javax.swing.ButtonGroup bgDatosCliente;
    private javax.swing.JComboBox<String> cbTipoTarjeta;
    private com.toedter.calendar.JDateChooser dcFechaNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton rbDni;
    private javax.swing.JRadioButton rbPasaporte;
    private javax.swing.JTabbedPane tabbedPaneCliente;
    private javax.swing.JTextField tfApellidos;
    private javax.swing.JTextField tfCodigoPostal;
    private javax.swing.JTextField tfDireccion;
    private javax.swing.JTextField tfDni;
    private javax.swing.JTextField tfDniTP;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfNumeroTarjeta;
    private javax.swing.JTextField tfPasaporte;
    private javax.swing.JTextField tfPasaporteTP;
    private javax.swing.JTextField tfPoblacion;
    private javax.swing.JTextField tfTelefonoFijo;
    private javax.swing.JTextField tfTelefonoMovil;
    // End of variables declaration//GEN-END:variables
}