/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recep_52_alejandro_checkin.carlos;

import java.sql.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlos
 */
public class AnularReservaDialog extends javax.swing.JDialog {

    /**
     * Creates new form AnularReservaDialog
     */
    private AnularReservaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        verFacturaDialog = new VerFacturaDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDatosCliente = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHabNoAnuladas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableHabAnuladas = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        bVolver = new javax.swing.JButton();
        tabbedPaneBuscarPor = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        rbDni = new javax.swing.JRadioButton();
        rbPasaporte = new javax.swing.JRadioButton();
        tfDni = new javax.swing.JTextField();
        tfPasaporte = new javax.swing.JTextField();
        bBuscarReservas = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cbIdsReserva = new javax.swing.JComboBox<>();
        bBuscarHabitacionesReservaDatosCliente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tfIdReserva = new javax.swing.JTextField();
        bBuscarHabitacionesReservaIdReserva = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        bAnular = new javax.swing.JButton();
        bAnularTodas = new javax.swing.JButton();
        bVerFactura = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Anular reserva");

        jLabel1.setText("Habitaciones de la reserva (no anuladas previamente):");

        tableHabNoAnuladas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableHabNoAnuladas);

        jLabel2.setText("Habitaciones de la reserva anuladas previamente:");

        tableHabAnuladas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableHabAnuladas);

        bVolver.setText("Volver");
        bVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVolverActionPerformed(evt);
            }
        });

        jLabel5.setText("Datos del cliente:");

        bgDatosCliente.add(rbDni);
        rbDni.setText("DNI");
        rbDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDniActionPerformed(evt);
            }
        });

        bgDatosCliente.add(rbPasaporte);
        rbPasaporte.setText("Pasaporte");
        rbPasaporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPasaporteActionPerformed(evt);
            }
        });

        bBuscarReservas.setText("Buscar reservas");
        bBuscarReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarReservasActionPerformed(evt);
            }
        });

        jLabel6.setText("Id de las reservas asociadas a ese cliente:");

        bBuscarHabitacionesReservaDatosCliente.setText("Buscar habitaciones de la reserva");
        bBuscarHabitacionesReservaDatosCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarHabitacionesReservaDatosClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbDni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbPasaporte)
                                .addGap(18, 18, 18)
                                .addComponent(tfPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(bBuscarReservas))
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbIdsReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bBuscarHabitacionesReservaDatosCliente)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbDni)
                            .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPasaporte)
                            .addComponent(tfPasaporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(bBuscarReservas)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbIdsReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarHabitacionesReservaDatosCliente))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        tabbedPaneBuscarPor.addTab("Datos cliente", jPanel1);

        jLabel4.setText("Id de la reserva a anular:");

        bBuscarHabitacionesReservaIdReserva.setText("Buscar habitaciones de la reserva");
        bBuscarHabitacionesReservaIdReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarHabitacionesReservaIdReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bBuscarHabitacionesReservaIdReserva)
                        .addContainerGap(187, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfIdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfIdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bBuscarHabitacionesReservaIdReserva)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tabbedPaneBuscarPor.addTab("Id reserva", jPanel2);

        jLabel3.setText("Buscar por:");

        bAnular.setText("Anular");
        bAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnularActionPerformed(evt);
            }
        });

        bAnularTodas.setText("Anular todas");
        bAnularTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnularTodasActionPerformed(evt);
            }
        });

        bVerFactura.setText("Ver factura");
        bVerFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerFacturaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bAnularTodas)
                                            .addComponent(bAnular)))
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(tabbedPaneBuscarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addComponent(bVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bVerFactura)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneBuscarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bAnular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bAnularTodas)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bVerFactura))
                .addGap(18, 18, 18)
                .addComponent(bVolver)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBuscarHabitacionesReservaIdReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarHabitacionesReservaIdReservaActionPerformed
        //Si no hay nada en el tf
        if(tfIdReserva.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Has de introducir un id reserva", "No hay un id reserva",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui hay un idReserva seleccionado, con lo que rellenamos las tablas con las habs que correspondan
        int idReserva = Integer.parseInt(tfIdReserva.getText());
        pulsadoBuscarHabitacionesDeLaReserva(idReserva);
    }//GEN-LAST:event_bBuscarHabitacionesReservaIdReservaActionPerformed

    private void rbPasaporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPasaporteActionPerformed
        //Activamos el tfPasaporte y desactivamos el tdDni
        tfPasaporte.setEnabled(true);
        tfDni.setEnabled(false);
    }//GEN-LAST:event_rbPasaporteActionPerformed

    private void bBuscarHabitacionesReservaDatosClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarHabitacionesReservaDatosClienteActionPerformed
        //Si no hay nada en el combo Box seleccionado
        if(cbIdsReserva.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"Has de seleccionar un id reserva", "No hay un id reserva seleccionado",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui hay un idReserva seleccionado, con lo que rellenamos las tablas con las habs que correspondan
        int idReserva = Integer.parseInt( (String) cbIdsReserva.getSelectedItem() );
        pulsadoBuscarHabitacionesDeLaReserva(idReserva);
        
    }//GEN-LAST:event_bBuscarHabitacionesReservaDatosClienteActionPerformed

    private void bBuscarReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarReservasActionPerformed
        //Si esta seleccionado el dni y no hay valor
        if(rbDni.isSelected() && tfDni.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el DNI", "Campo DNI vacío",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Si esta seleccionado el pasaporte y no hay valor
        else if(rbPasaporte.isSelected() && tfPasaporte.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Has de introducir un valor para el pasaporte", "Campo pasaporte vacío",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui hay valor para dni o para pasaporte
        cbIdsReserva.setModel(new DefaultComboBoxModel());//Eliminamos los elementos del comboBox
        
        if(rbDni.isSelected()){
            //Buscamos los ids de la reserva del cliente cuyo dni nos indican
            String dni = tfDni.getText();
            List<Integer> listaIdsReserva = BD_jdbc.dameIdsReservaDelClienteConDni(dni);
            //Añadimos esos id al cb
            for (Integer idReserva : listaIdsReserva)
                cbIdsReserva.addItem(""+idReserva);
            
        }
        else if(rbPasaporte.isSelected()){
            //Buscamos los ids de la reserva del cliente cuyo pasaporte nos indican
            String pasaporte = tfPasaporte.getText();
            List<Integer> listaIdsReserva = BD_jdbc.dameIdsReservaDelClienteConPasaporte(pasaporte);
            //Añadimos esos id al cb
            for (Integer idReserva : listaIdsReserva)
                cbIdsReserva.addItem(""+idReserva);
            
        }
        
    }//GEN-LAST:event_bBuscarReservasActionPerformed

    private void rbDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDniActionPerformed
        //Activamos el tdDni y desactivamos el tfPasaporte
        tfDni.setEnabled(true);
        tfPasaporte.setEnabled(false);
    }//GEN-LAST:event_rbDniActionPerformed

    private void bVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVolverActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_bVolverActionPerformed

    private void bAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnularActionPerformed
        //Si no hay ninguna fila seleccionada en la tableHabNoAnuladas lanzamos un dialogo
        int fila_seleccinada = tableHabNoAnuladas.getSelectedRow();
        if(fila_seleccinada==-1){
            JOptionPane.showMessageDialog(null,"Has de seleccionar una fila de la tabla de arriba", "No hay una fila seleccionada",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Aqui hay una fila seleccionada
        
        //Tenemos que anular la Reserva_habitacion de la fila seleccionada
        //Sacamos de la tabla el id de la habitacion
        DefaultTableModel DTM_HabsNoAnuladas = (DefaultTableModel) tableHabNoAnuladas.getModel();
        String idHabitacion = (String) DTM_HabsNoAnuladas.getValueAt(fila_seleccinada, 0);
        
        //Con el id de la habitacion, sacamos de la lista de habitaciones no anuladas del diccionario
        //el resto de datos (idReserva e idModalidadReservaHabitacion)
        List<HabitacionesReservaAnularReserva> listaHabsNoAnuladas = dicc.get("no_anuladas");
        //dado el id de la habitacion, recorremos la lista, y por cada objeto de la lista, comprobamos si ese objeto tiene el 
        //mismo idHabitacion que el que tenemos (si lo tiene, salimos del for porque ya sabemos el indice donde esta en la lista)
        int indiceLista=0;
        for (HabitacionesReservaAnularReserva habNoAnulada : listaHabsNoAnuladas) {
            String idHabitacionLista = habNoAnulada.getIdHabitacion();
            if(idHabitacionLista.equals(idHabitacion))
                break;
            
            indiceLista++;
        }
        HabitacionesReservaAnularReserva habResAnulada = listaHabsNoAnuladas.remove(indiceLista);
        //Añadimos esa habRes a la otra lista del diccionario
        List<HabitacionesReservaAnularReserva> listaHabsAnuladas = dicc.get("anuladas");
        listaHabsAnuladas.add(habResAnulada);
        
        //Datos
        int idReserva = habResAnulada.getIdReserva(); 
        int idModalidadReservaHabitacion = habResAnulada.getIdModalidadReservaHabitacion();
        
        //Con esos datos, vamos a la BD y actualizamos la tabla ResHab, indicando que la hab cuyos
        //3 ids tenemos, ha sido anulada
        BD_jdbc.anularReservaHabitacion(idHabitacion, idReserva, idModalidadReservaHabitacion);
        
        //Actualizamos las tablas
        rellenaTablas();
        
        //Comprobamos si se ha anulado la reserva totalmente el dia antes de la entrada al hotel
        compruebaTodasAnuladas(idReserva);
        
    }//GEN-LAST:event_bAnularActionPerformed

    private void bAnularTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnularTodasActionPerformed
        //Si la tabla de arriba esta vacia sale un dialogo
        if(tableHabNoAnuladasVacia()){
            JOptionPane.showMessageDialog(null,"No hay reservas que anular", "No hay reservas que anular",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int idReserva=-1;
        //Tenemos que recorrer todas las filas de la tabla y anularlas
        DefaultTableModel DTM_HabsNoAnuladas = (DefaultTableModel) tableHabNoAnuladas.getModel();
        int numFilas = DTM_HabsNoAnuladas.getRowCount();
        
        for (int fila = 0; fila < numFilas; fila++) {
            String idHabitacion = (String) DTM_HabsNoAnuladas.getValueAt(fila, 0);
            
            //Con el id de la habitacion, sacamos de la lista de habitaciones no anuladas del diccionario
            //el resto de datos (idReserva e idModalidadReservaHabitacion)
            List<HabitacionesReservaAnularReserva> listaHabsNoAnuladas = dicc.get("no_anuladas");
            //dado el id de la habitacion, recorremos la lista, y por cada objeto de la lista, comprobamos si ese objeto tiene el 
            //mismo idHabitacion que el que tenemos (si lo tiene, salimos del for porque ya sabemos el indice donde esta en la lista)
            int indiceLista=0;
            for (HabitacionesReservaAnularReserva habNoAnulada : listaHabsNoAnuladas) {
                String idHabitacionLista = habNoAnulada.getIdHabitacion();
                if(idHabitacionLista.equals(idHabitacion))
                    break;

                indiceLista++;
            }
            HabitacionesReservaAnularReserva habResAnulada = listaHabsNoAnuladas.remove(indiceLista);
            //Añadimos esa habRes a la otra lista del diccionario
            List<HabitacionesReservaAnularReserva> listaHabsAnuladas = dicc.get("anuladas");
            listaHabsAnuladas.add(habResAnulada);

            //Datos
            idReserva = habResAnulada.getIdReserva(); 
            int idModalidadReservaHabitacion = habResAnulada.getIdModalidadReservaHabitacion();

            //Con esos datos, vamos a la BD y actualizamos la tabla ResHab, indicando que la hab cuyos
            //3 ids tenemos, ha sido anulada
            BD_jdbc.anularReservaHabitacion(idHabitacion, idReserva, idModalidadReservaHabitacion);
        }
        
        
        //Actualizamos las tablas
        rellenaTablas();
        //Ejecutamos la accion de cuando se anulan todas
        accionTodasAnuladas(idReserva);
    }//GEN-LAST:event_bAnularTodasActionPerformed

    private void bVerFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerFacturaActionPerformed
        //Al pulsar el boton, se comprueba si existe una factura
       
        
        //Sacamos el id de la reserva de la primera fila de la tabla de abajo
        //Si esta vacia o no hay valor en idReserva es que no hay factura o no hay idReserva seleccionado
        DefaultTableModel DTM = (DefaultTableModel) tableHabAnuladas.getModel();
        if(DTM.getRowCount()==0 || idReservaFIELD == null)
            return;
        
         //Si no existe factura salta un dialogo
        if(!BD_jdbc.existeFactura(idReservaFIELD)){
            JOptionPane.showMessageDialog(null,"No existe una factura asociada a esta reserva", "No hay factura",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Si existe se nos abre un dialogo con el contenido de la factura
        else{
            //Sacamos de la BD el contenido de la factura asociada a esta reserva
            String contenido = BD_jdbc.getContenidoFactura(idReservaFIELD);
            
            //Le pasamos al dialogo el contenido de la factura
            verFacturaDialog.showDialog(contenido,idReservaFIELD);
        }
        
    }//GEN-LAST:event_bVerFacturaActionPerformed

    private boolean tableHabNoAnuladasVacia(){
        DefaultTableModel DTM = (DefaultTableModel) tableHabNoAnuladas.getModel();
        if(DTM.getRowCount()==0)//Si no hay ninguna fila en la tabla es que está vacía 
            return true;
        else return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnularReservaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnularReservaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnularReservaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnularReservaDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnularReservaDialog dialog = new AnularReservaDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Codigo mio
    private boolean POK;//Variable ¿pulsó OK?
    
    public AnularReservaDialog(){
        this(null,true);//Ventana modal
    }
    
    public boolean showDialog(){
        iniciarComponentesMio();
        
        POK=false;
        setVisible(true);//Mostramos la ventana
        //Es un codigo bloqueante
        //Como la ventana es modal se queda bloqueando la ventana anterior
        //La ventana antigua queda bloqueada porque el metodo setVisible no termina
        return POK;//Aqui POK vale true si el usuario pulso el boton OK y false si pulso Cancelar o cerro la ventana
    }
    
    private void inicializarTablas(){
        inicializarTablaHabNoAnuladas();
        inicializarTablaHabAnuladas();
    }
    
    private void inicializarTablaHabNoAnuladas(){
        tableHabNoAnuladas.setModel(new DefaultTableModel());
        DefaultTableModel DTM_HabNoAnuladas = (DefaultTableModel) tableHabNoAnuladas.getModel();
        añadirColumnasHabNoAnuladas(DTM_HabNoAnuladas);
        tableHabNoAnuladas.setDefaultEditor(Object.class, null);
        tableHabNoAnuladas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    private void inicializarTablaHabAnuladas(){
        tableHabAnuladas.setModel(new DefaultTableModel());
        DefaultTableModel DTM_HabAnuladas = (DefaultTableModel) tableHabAnuladas.getModel();
        añadirColumnasHabAnuladas(DTM_HabAnuladas);
        tableHabAnuladas.setDefaultEditor(Object.class, null);
        tableHabAnuladas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    private void iniciarComponentesMio(){
        inicializarTablas();
        
        //Resto de componentes de la interfaz
        tabbedPaneBuscarPor.setSelectedIndex(0);//Por defecto se muestra la primera pestaña
        rbDni.setSelected(true);//Por defecto esta seleccionado el dni
        tfDni.setEnabled(true);//Y su tf esta habilitado
        tfDni.setText("");
        rbPasaporte.setSelected(false);//Esta no esta seleccionado el pasaporte
        tfPasaporte.setEnabled(false);//Y su tf esta deshabilitado
        tfPasaporte.setText("");
        tfIdReserva.setText("");
        
        cbIdsReserva.setModel(new DefaultComboBoxModel());//Eliminamos los elementos del comboBox
        
        dicc = new HashMap<>();
    }
    
    private void añadirFila(javax.swing.table.DefaultTableModel DTM, String[] s){
        DTM.addRow(s);
    }
    
    /**
     * Establece el numero de columnas de la tabla, así como el valor de las cabeceras
     * @param DTM 
     */
    private void añadirColumnasHabNoAnuladas(javax.swing.table.DefaultTableModel DTM){
        DTM.addColumn("Habitación");
        DTM.addColumn("Tipo");
        DTM.addColumn("Fecha Entrada");
        DTM.addColumn("Fecha Salida");
    }
    
    private void añadirColumnasHabAnuladas(javax.swing.table.DefaultTableModel DTM){
        DTM.addColumn("Habitación");
        DTM.addColumn("Tipo");
        DTM.addColumn("Fecha Entrada");
        DTM.addColumn("Fecha Salida");
    }
    
    private void pulsadoBuscarHabitacionesDeLaReserva(int idReserva){
        //Guardamos el valor del idReserva
        idReservaFIELD = idReserva;
        
        //Le asignamos al diccionario los valores que saquemos de la BD
        dicc = BD_jdbc.dameHabitacionesReservaAnuladasYNoAnuladasCuyoIdReservaEs(idReserva);
        
        //Rellenamos las tablas
        rellenaTablas();
    }
    
    private void rellenaTablas(){
        //Rellenamos las tablas con el contenido del diccionario
        
        //Primero rellenamos la tablas de habs no anuladas
        rellenaTablaHabsNoAnuladas(dicc.get("no_anuladas"));
        //Rellenamos la tablas de habs anuladas
        rellenaTablaHabsAnuladas(dicc.get("anuladas"));
    }
    
    private void rellenaTablaHabsNoAnuladas(List<HabitacionesReservaAnularReserva> listaHabs){
        DefaultTableModel DTM_HabsNoAnuladas = (DefaultTableModel) tableHabNoAnuladas.getModel();
        rellenaTabla(listaHabs,DTM_HabsNoAnuladas);
    }
    
    private void rellenaTablaHabsAnuladas(List<HabitacionesReservaAnularReserva> listaHabs){
        DefaultTableModel DTM_HabsAnuladas = (DefaultTableModel) tableHabAnuladas.getModel();
        rellenaTabla(listaHabs,DTM_HabsAnuladas);
    }
    
    private void rellenaTabla(List<HabitacionesReservaAnularReserva> listaHabs,DefaultTableModel DTM){
        //Borramos las filas de la tabla
        borrarFilasTabla(DTM);
        //Añadimos a la tabla los datos de la lista que nos hacen falta
        for (HabitacionesReservaAnularReserva hab : listaHabs) {
            String idHabitacion = hab.getIdHabitacion();
            int tipo = hab.getTipo();
            String tipo_string;
            LocalDate fechaEntrada = hab.getFechaEntrada();
            LocalDate fechaSalida = hab.getFechaSalida();
            
            tipo_string="";
            if(tipo==1)
                tipo_string="sencilla";
            else if(tipo==2)
                tipo_string="doble";
            else if(tipo==3)
                tipo_string="triple";
            
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            String fechaEntrada_formateada = dtf.format(fechaEntrada);
            String fechaSalida_formateada = dtf.format(fechaSalida);

            //Añadimos la fila
            String[] s = {idHabitacion,tipo_string,fechaEntrada_formateada,fechaSalida_formateada};
            añadirFila(DTM, s);
        }
        
    }
    
    private void borrarFilasTabla(DefaultTableModel DTM){
        int numFilas = DTM.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            DTM.removeRow(0);//borramos en cada momento la fila de mas arriba en la tabla
        }
    }
    
    private void compruebaTodasAnuladas(int idReserva){
        //Si la lista de habitaciones no anuladas del diccionario esta vacia, es que estan todas anuladas
        List<HabitacionesReservaAnularReserva> listaHabsNoAnuladas = dicc.get("no_anuladas");
        if(listaHabsNoAnuladas.isEmpty()){
            accionTodasAnuladas(idReserva);
        }
    }
    
    private void accionTodasAnuladas(int idReserva){
        //Si se han anulado todas el dia antes de la entrada del cliente hay que crear una factura y guardar en la BD
        //Comprobamos si el dia de hoy es el dia antes al dia de entrada del cliente
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate diaActual = LocalDate.now(); System.out.println("TRAZA: Fecha dia actual: "+dtf.format(diaActual));
        LocalDate diaEntrada = BD_jdbc.getDiaEntradaCliente(idReserva); System.out.println("TRAZA: Fecha entrada al hotel cliente: "+dtf.format(diaEntrada));
        /*boolean reservaTotalmenteAnuladaElDiaAntes = 
                diaEntrada.getYear() == diaActual.getYear() && 
                diaEntrada.getMonth() == diaActual.getMonth() && 
                (diaEntrada.getDate()-1) == diaActual.getDate();*/
        
        boolean reservaTotalmenteAnuladaElDiaAntes = diaActual.equals(diaEntrada.minusDays(1));
        System.out.println("TRAZA: Fecha entrada - 1 dia: "+dtf.format(diaEntrada.minusDays(1)));
        System.out.println("TRAZA: reservaTotalmenteAnuladaElDiaAntes: " + reservaTotalmenteAnuladaElDiaAntes);

        if(reservaTotalmenteAnuladaElDiaAntes){
            //Mostramos un diálogo
            JOptionPane.showMessageDialog(null,"¡Todas las habitaciones de la reserva han sido anuladas!\n"
                    + "Se ha anulado totalmente la reserva el día antes\nde la entrada del cliente al hotel.\n"
                    + "Se ha generado una factura (para verla pulse el botón \"Ver factura\")", 
                    "Reserva anulada totalmente el día antes",JOptionPane.WARNING_MESSAGE);
            //Creamos la factura
            BD_jdbc.crearFacturaAnulada(idReserva);
        }
        
        else
            //Mostramos un diálogo
            JOptionPane.showMessageDialog(null,"¡Todas las habitaciones de la reserva\n han sido anuladas!", "Reserva anulada totalmente",JOptionPane.WARNING_MESSAGE);
    }
    
    private Map<String,List<HabitacionesReservaAnularReserva>> dicc;
    private Integer idReservaFIELD = null;
    private VerFacturaDialog verFacturaDialog;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAnular;
    private javax.swing.JButton bAnularTodas;
    private javax.swing.JButton bBuscarHabitacionesReservaDatosCliente;
    private javax.swing.JButton bBuscarHabitacionesReservaIdReserva;
    private javax.swing.JButton bBuscarReservas;
    private javax.swing.JButton bVerFactura;
    private javax.swing.JButton bVolver;
    private javax.swing.ButtonGroup bgDatosCliente;
    private javax.swing.JComboBox<String> cbIdsReserva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton rbDni;
    private javax.swing.JRadioButton rbPasaporte;
    private javax.swing.JTabbedPane tabbedPaneBuscarPor;
    private javax.swing.JTable tableHabAnuladas;
    private javax.swing.JTable tableHabNoAnuladas;
    private javax.swing.JTextField tfDni;
    private javax.swing.JTextField tfIdReserva;
    private javax.swing.JTextField tfPasaporte;
    // End of variables declaration//GEN-END:variables
}
